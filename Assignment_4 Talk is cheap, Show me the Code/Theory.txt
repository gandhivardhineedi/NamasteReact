Chapter - 04 Talk is cheap, show me the code.

Assignment:

1) Is JSX mandatory for React?

Ans) No JSX is not mandatory for react. we can still work with react using create element from the react object from the react library.
JSX is a simple way of creating react element by using HTML like language to make developers life easy, but at the end of the day JSX also coverted into a react element.

Basically React element can be created using plain javascript, JSX justs gives us a synatical sugar for creating a react element.

2) Is ES6 mandatory for React ?

Ans) No Again react element can be created using plain JS, we don't need ES6 for implementing react, ES6 makes developer lives easy thats it.Still we can implement React using Plain js.

3) {TitleComponent} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>} in JSX?

Ans) 
    In react {} are used to write Js code with in JSX syntax.

    {TitleComponent} to render the variable which holds the react element in it.
    {<TitleComponent/>} to render the functional component. here we can pass the properties.    
    {<TitleComponent></TitleComponent>} to render the functional component also we can give child component and elements in it.

4) How can I write comments in JSX?

Ans) In JSX we can write comments with in the {} as shown below.

const TitleComponent = () => {
    return (
        <div>
            <img src='../../xyz.jpeg'/>
            {
                /** comments are given here*/
            }
        </div>
    );
};

5) What is <React.Fragment></React.Fragment> and <></>?

Ans) In react we have a rule, that is we can have only one parent element. we can't write two parent elements with in a react element.
But if we want to render multiple elements or components at same time, we can either wrap them in a div element.But it is not best way. we are tring to add Div tag
unnecessary into DOM. To avoid it we can use React.Fragment.

"React.Fragment" is a pattern in React. component provided by the react libray, for component to return multiple elements. Basically it allows us to group the childrens without adding extra nodes to the DOM.

const render = () => {
    return (
        <React.Fragment>
            <Header/>
            <Body/>
            <Footer/>
        </React.Fragment>
    );
}

<></> is a short-hand way of writting React.Fragment. Both are same at the end of the day.

6) What is Virtual DOM?

Ans) Virtual DOM is a representaion of the actual DOM in our Code.the reason we need virtual DOM is make react faster by using Reconciliation concept.

the Virtual DOM is a programming concept or startegy where a virtual representaion of UI is kept in memory and synced with the actual DOM vy a library such as ReactDOM. this process is called reconciliation.

7) what is Reconciliation in React?

Ans) Reconciliation uses the Diffing Algorithm, when Diffing two trees (Virtual DOM and actual DOM), React finds out what needs to be updated & just updates that particular part of the tree instead of rendering the whole DOM tree.

8) What is React Fiber?

Ans)

Fibers are low-level abstraction of Reconciliater, A fiber represents a unit of work. a fiber is a Javascript object that contains infomation about a component it's inputs, and its output. A fibre corresponds to a stack frame, but it also corresponds to an instance of a compoenet.

Why we need a Fiber. Basically to improve the React performace, How it increases the performace??

The performance is increases by prioritizing the work coming from the User interactions  (such as an animation caused by a button click) over less importanr background work (Such as rendering new content just loaded from the network) to avoid dropping frames.

"a Primary goal is to enable React to take adantage of the scheduling".

pause work and come back to it later.
assign priority to different types of work.
reuse previously completed work.
abort work if it's no longer needed.

9) Why we need keys in react? When do we needs keys in React?

Ans) Keys: A key is a special string attribute you need to include when creating list elements.

Why we need it?
Key help React identify which have changed, are added, or removed. Keys should be given to the elements inside the array to give the elements a stable identity.
Other wise React confuses and will render the whole list in worst cases, which will cause performance issues.

When do we need keys in React?
Key is needed when ever there is a elements list present and that to we do some operations on top of the list elements, like adding new element removing element or sorting the elements.

If we don't add the keys, In worst cases it will render the whole list of elements unnecessary, which will leads to performace issues.

10) Can we use index as keys in React?

Ans) No absoultly not. untill there is no choice, with some conditions there should be no sorting or removal of the elements from the list.
Let me explain: a key is the only thing that a react uses to identify the DOM element. that means it should be unique to that element in the list. need not to unique for the whole soultion.
but it should be unique for that element in that list of elements.
then even index is unique in the list, yes unique in the list but not unique for that element, let say if do some manuplation on top of the array of elements, let say sorted the elements
then the order of the elements will change and the key will also changes for the elements and the React assumes there no change in the list. as the array indexes will remain same.
Which will break the functionalilty at the end of the day.
That is why we should never use index as a key untill we have no option with a condition that to operations performed on the list.

11) What are the props in the React? Ways to?

Ans) props are the arguments that we pass to a React Component.

Basically props are the way of communication between the React components, A parent React component and pass some props to its children React components, So they can use those info to change the data. It is similar to the attributes in the HTML Tags, but we can pass any Javascript values, like object, array and a valid JS expression.

12) What is a Config Driven UI?

ans) An application that can change its look with the change in the configuration data is know as Config Driven UI.

Unlike a traditional way of building an appilcation, CDD (Config Driven Development) 
1) Independent components are build first at the atomic level.
2) An Interface (JSON) is compose to define the High level UI acts as blue print.
3) Combination of Independent components and UI blue print (JSON) used to build-up or build-out the application.

